unit classGetGenres;

// *************************************************
// Generated By: JsonToDelphiClass - 0.65
// Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
// Generated On: 2016-11-21 18:29:29
// *************************************************
// Created By  : Petar Georgiev - 2014
// WebSite     : http://pgeorgiev.com
// *************************************************

interface

uses Generics.Collections, Rest.Json;

type

  TArtistGenresClass = class
  private
    FGenre: TArray<string>;
  public
    property genre: TArray<string> read FGenre write FGenre;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TArtistGenresClass;
    function CountGenres: integer;
  end;

  TGetArtistGenresClass = class
  private
    FArtistGenres: TArtistGenresClass;
    FStatus: string;
    FType: string;
    FVersion: string;
  public
    property artistGenres: TArtistGenresClass read FArtistGenres
      write FArtistGenres;
    property status: string read FStatus write FStatus;
    property &type: string read FType write FType;
    property version: string read FVersion write FVersion;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TGetArtistGenresClass;

  end;

type

  TGenreClass = class
  private
    FSongCount: Extended;
    FAlbumCount: Extended;
    FArtistCount: Extended;
    FValue: string;
  public
    property songCount: Extended read FSongCount write FSongCount;
    property albumCount: Extended read FAlbumCount write FAlbumCount;
    property artistCount: Extended read FArtistCount write FArtistCount;
    property value: string read FValue write FValue;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TGenreClass;
  end;

  TGenresClass = class
  private
    FGenre: TArray<TGenreClass>;
  public
    property genre: TArray<TGenreClass> read FGenre write FGenre;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TGenresClass;
    function CountGenres: integer;
  end;

  TGetGenresClass = class
  private
    FGenres: TGenresClass;
    FStatus: string;
    FType: string;
    FVersion: string;
  public
    property genres: TGenresClass read FGenres write FGenres;
    property status: string read FStatus write FStatus;
    property &type: string read FType write FType;
    property version: string read FVersion write FVersion;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TGetGenresClass;
  end;

implementation

{ TGenreClass }

function TGenreClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TGenreClass.FromJsonString(AJsonString: string): TGenreClass;
begin
  result := TJson.JsonToObject<TGenreClass>(AJsonString)
end;

{ TGenresClass }

destructor TGenresClass.Destroy;
var
  LgenreItem: TGenreClass;
begin

  for LgenreItem in FGenre do
    LgenreItem.free;

  inherited;
end;

function TGenresClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TGenresClass.FromJsonString(AJsonString: string): TGenresClass;
begin
  result := TJson.JsonToObject<TGenresClass>(AJsonString)
end;

function TGenresClass.CountGenres: integer;
begin
  result := Length(self.FGenre);
end;

{ TGetGenresClass }

constructor TGetGenresClass.Create;
begin
  inherited;
  FGenres := TGenresClass.Create();
end;

destructor TGetGenresClass.Destroy;
begin
  FGenres.free;
  inherited;
end;

function TGetGenresClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TGetGenresClass.FromJsonString(AJsonString: string)
  : TGetGenresClass;
begin
  result := TJson.JsonToObject<TGetGenresClass>(AJsonString)
end;

{ TArtistGenresClass }

function TArtistGenresClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TArtistGenresClass.FromJsonString(AJsonString: string)
  : TArtistGenresClass;
begin
  result := TJson.JsonToObject<TArtistGenresClass>(AJsonString)
end;

{ TGetArtistGenresClass }

constructor TGetArtistGenresClass.Create;
begin
  inherited;
  FArtistGenres := TArtistGenresClass.Create();
end;

destructor TGetArtistGenresClass.Destroy;
begin
  FArtistGenres.free;
  inherited;
end;

function TGetArtistGenresClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TGetArtistGenresClass.FromJsonString(AJsonString: string)
  : TGetArtistGenresClass;
begin
  result := TJson.JsonToObject<TGetArtistGenresClass>(AJsonString)
end;

function TArtistGenresClass.CountGenres: integer;
begin
  result := Length(self.FGenre);
end;

end.

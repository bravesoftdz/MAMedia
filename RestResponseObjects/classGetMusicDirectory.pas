unit classGetMusicDirectory;

// *************************************************
// Generated By: JsonToDelphiClass - 0.65
// Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
// Generated On: 2016-11-21 13:21:03
// *************************************************
// Created By  : Petar Georgiev - 2014
// WebSite     : http://pgeorgiev.com
// *************************************************

interface

uses Generics.Collections, Rest.Json;

type

  TChildClass = class
  private
    FAlbum: string;
    FArtist: string;
    FBitRate: Extended;
    FContentType: string;
    FCoverArt: string;
    FCreated: string;
    FDuration: Extended;
    FGenre: string;
    FId: string;
    FIsDir: Boolean;
    FIsVideo: Boolean;
    FParent: string;
    FPath: string;
    FPlayCount: Extended;
    FRank: Extended;
    FSize: Extended;
    FSuffix: string;
    FTitle: string;
    FTrack: Extended;
    FType: string;
    FYear: Extended;
    FIsArtist: Boolean;
    FTranscodedContentType: string;
    FTranscodedSuffix: string;
    FUserRating: Extended;
    FAverageRating: Extended;
    FDiscNumber: Extended;
    FStarred: string;
    FAlbumId: string;
    FArtistId: string;
    FBookmarkPosition: Extended;
    FOriginalWidth: Extended;
    FOriginalHeight: Extended;
    FData: string;
    FHasVideoConversion: Boolean;

  public
    property isArtist: Boolean read FIsArtist write FIsArtist;
    property transcodedContentType: string read FTranscodedContentType
      write FTranscodedContentType;
    property transcodedSuffix: string read FTranscodedSuffix
      write FTranscodedSuffix;
    property userRating: Extended read FUserRating write FUserRating;
    property averageRating: Extended read FAverageRating write FAverageRating;
    property discNumber: Extended read FDiscNumber write FDiscNumber;
    property starred: string read FStarred write FStarred;
    property albumId: string read FAlbumId write FAlbumId;
    property artistId: string read FArtistId write FArtistId;
    property bookmarkPosition: Extended read FBookmarkPosition
      write FBookmarkPosition;
    property originalWidth: Extended read FOriginalWidth write FOriginalWidth;
    property originalHeight: Extended read FOriginalHeight
      write FOriginalHeight;
    property data: string read FData write FData;
    property hasVideoConversion: Boolean read FHasVideoConversion
      write FHasVideoConversion;

    property album: string read FAlbum write FAlbum;
    property artist: string read FArtist write FArtist;
    property bitRate: Extended read FBitRate write FBitRate;
    property contentType: string read FContentType write FContentType;
    property coverArt: string read FCoverArt write FCoverArt;
    property created: string read FCreated write FCreated;
    property duration: Extended read FDuration write FDuration;
    property genre: string read FGenre write FGenre;
    property id: string read FId write FId;
    property isDir: Boolean read FIsDir write FIsDir;
    property isVideo: Boolean read FIsVideo write FIsVideo;
    property parent: string read FParent write FParent;
    property path: string read FPath write FPath;
    property playCount: Extended read FPlayCount write FPlayCount;
    property rank: Extended read FRank write FRank;
    property size: Extended read FSize write FSize;
    property suffix: string read FSuffix write FSuffix;
    property title: string read FTitle write FTitle;
    property track: Extended read FTrack write FTrack;
    property &type: string read FType write FType;
    property year: Extended read FYear write FYear;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TChildClass;
  end;

  TDirectoryClass = class
  private
    FChild: TArray<TChildClass>;
    FId: string;
    FName: string;
    FParent: string;
    FPlayCount: Extended;
    FStarred: string;
    FUserRating: Extended;
    FAverageRating: Extended;
  public
    property child: TArray<TChildClass> read FChild write FChild;
    property id: string read FId write FId;
    property name: string read FName write FName;
    property parent: string read FParent write FParent;
    property playCount: Extended read FPlayCount write FPlayCount;
    property userRating: Extended read FUserRating write FUserRating;
    property averageRating: Extended read FAverageRating write FAverageRating;
    property starred: string read FStarred write FStarred;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TDirectoryClass;
    function CountChild: integer;
  end;

  TGetMusicDirectoryClass = class
  private

  public
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TGetMusicDirectoryClass;
  end;

implementation

{ TChildClass }

function TChildClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TChildClass.FromJsonString(AJsonString: string): TChildClass;
begin
  result := TJson.JsonToObject<TChildClass>(AJsonString)
end;

{ TDirectoryClass }

destructor TDirectoryClass.Destroy;
var
  LchildItem: TChildClass;
begin

  for LchildItem in FChild do
    LchildItem.free;

  inherited;
end;

function TDirectoryClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TDirectoryClass.FromJsonString(AJsonString: string)
  : TDirectoryClass;
begin
  result := TJson.JsonToObject<TDirectoryClass>(AJsonString)
end;

function TDirectoryClass.CountChild: integer;
begin
  result := Length(self.FChild);
end;

{ TGetMusicDirectoryClass }

constructor TGetMusicDirectoryClass.Create;
begin
  inherited;
end;

destructor TGetMusicDirectoryClass.Destroy;
begin
  inherited;
end;

function TGetMusicDirectoryClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TGetMusicDirectoryClass.FromJsonString(AJsonString: string)
  : TGetMusicDirectoryClass;
begin
  result := TJson.JsonToObject<TGetMusicDirectoryClass>(AJsonString)
end;

end.
